Index: src/MsgQServant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.lang.reflect.Array;\nimport java.rmi.RemoteException;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Stack;\nimport java.util.Vector;\n\npublic class MsgQServant implements MsgQ, Runnable {\n    private static final long serialVersionUID = 1;\n\n    private Hashtable<String,Vector<Message>> clientQueues = new Hashtable<>();\n    private Hashtable<String, TopicQueue> topicQueues = new Hashtable<>();\n\n    public MsgQServant() throws RemoteException{\n\n    }\n\n    private boolean existeixMsgQ(String msgqname){\n        if(clientQueues.get(msgqname)!=null){\n            return true;\n        }\n        return false;\n    }\n    private boolean existeixTopicQ(String topicname){\n        if(topicQueues.get(topicname)!=null){\n            return true;\n        }\n        return false;\n    }\n    public EMomError MsgQ_CreateQueue(String msgqname) throws RemoteException {\n        return createQueue(msgqname);\n    }\n\n    private EMomError createQueue(String msgqname) {\n        if(!existeixMsgQ(msgqname)) {\n            clientQueues.put(msgqname, new Stack<>());\n            return EMomError.NoError;\n        }\n        return EMomError.JaExisteixMsgQ;\n    }\n\n    public EMomError MsgQ_CloseQueue(String msgqname)throws RemoteException{\n        return closeQueue(msgqname);\n    }\n\n    private EMomError closeQueue(String msgqname) {\n        if(clientQueues.get(msgqname)!=null){\n            clientQueues.remove(msgqname);\n            return EMomError.NoError;\n        }\n        return EMomError.NoExisteixMsgQ;\n    }\n\n    public EMomError MsgQ_SendMessage(String msgqname, String message, int type) throws RemoteException{\n        return sendMessage(msgqname,message,type);\n    }\n\n    private EMomError sendMessage(String msgqname, String message, int type) {\n        if(existeixMsgQ(msgqname)){\n            clientQueues.get(msgqname).add(new Message(message,type));\n            return EMomError.NoError;\n        }\n        return EMomError.NoExisteixMsgQ;\n\n    }\n\n    public String MsgQ_ReceiveMessage(String msgqname,int type) throws RemoteException{\n        return  receiveMessage(msgqname,type);\n    }\n\n    public String receiveMessage(String msgqname,int type) throws RemoteException{\n        if(existeixMsgQ(msgqname)) {\n            int it = FIFOSeach(clientQueues.get(msgqname), type);\n            if (it != -1) {\n                Message msg = clientQueues.get(msgqname).remove(it);\n                return msg.message;\n            }\n            return \"Error, no queden missatges!\";\n        }\n        return \"Error, no existeix la cua!\";\n    }\n    private int FIFOSeach(Vector<Message> messages,int type){\n\n        for(int i = 0;i<messages.size();i++){\n            if(messages.get(i).type == type){\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public  EMomError MsgQ_CreateTopic(String topicname, EPublishMode mode) throws RemoteException{\n        createTopic(topicname, mode);\n        return null;\n    }\n\n    private EMomError createTopic(String topicname, EPublishMode mode){\n        if(!existeixTopicQ(topicname)){\n            topicQueues.put(topicname,new TopicQueue(mode));\n            return EMomError.NoError;\n        }\n        return EMomError.JaExisteixTopicQ;\n    }\n\n    public EMomError MsgQ_CloseTopic(String topicname) throws RemoteException{\n        return closeTopic(topicname);\n    }\n\n    private EMomError closeTopic(String topicname) {\n        if(existeixTopicQ(topicname)){\n            topicQueues.get(topicname).remove(topicname);\n            topicQueues.remove(topicname);\n            return EMomError.NoError;\n        }\n        return EMomError.NoExisteixTopicQ;\n    }\n\n    public  EMomError MsgQ_Publish(String topic, String message, int type) throws RemoteException{\n        return publish(topic,message,type);\n    }\n    public  EMomError publish(String topic, String message, int type){\n        if(existeixTopicQ(topic)){\n            topicQueues.get(topic).addMsg(new Message(message,type));\n            return EMomError.NoError;\n        }\n        return EMomError.NoExisteixTopicQ;\n    }\n\n    public  EMomError MsgQ_Subscribe(String topic, TopicListenerInterface listener) throws RemoteException{\n        return subscribe(topic,listener);\n    }\n\n    public  EMomError subscribe(String topic, TopicListenerInterface listener){\n        if(existeixTopicQ(topic)) {\n            topicQueues.get(topic).subscribe(listener);\n            return EMomError.NoError;\n        }\n        return  EMomError.NoExisteixTopicQ;\n    }\n\n    @Override\n    public void run() {\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/MsgQServant.java b/src/MsgQServant.java
--- a/src/MsgQServant.java	(revision 079a1eca567d1f74e61c00f019b5da77f7a99227)
+++ b/src/MsgQServant.java	(date 1681571063317)
@@ -33,7 +33,7 @@
 
     private EMomError createQueue(String msgqname) {
         if(!existeixMsgQ(msgqname)) {
-            clientQueues.put(msgqname, new Stack<>());
+            clientQueues.put(msgqname, new Vector<>());
             return EMomError.NoError;
         }
         return EMomError.JaExisteixMsgQ;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"860d4be7-a091-4234-ab2e-65298a77c519\" name=\"Changes\" comment=\"init\">\r\n      <change beforePath=\"$PROJECT_DIR$/.gitignore\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.gitignore\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"client\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2NsLuu33jKhH7l0fjWpSmIFSNVq\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/brisk/Documents/#uni/practica1_CDA&quot;,\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;\n  }\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateClassDialog.RecentsKey\">\r\n      <recent name=\"\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"860d4be7-a091-4234-ab2e-65298a77c519\" name=\"Changes\" comment=\"\" />\r\n      <created>1680448078061</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1680448078061</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"init\">\r\n      <created>1680448385649</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680448385649</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"init\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"init\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 079a1eca567d1f74e61c00f019b5da77f7a99227)
+++ b/.idea/workspace.xml	(date 1681571063860)
@@ -5,8 +5,8 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="860d4be7-a091-4234-ab2e-65298a77c519" name="Changes" comment="init">
-      <change beforePath="$PROJECT_DIR$/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/MsgQServant.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/MsgQServant.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
